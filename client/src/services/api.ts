/**
 * Swagger Petstore
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";



export interface Dictionary<T> { [index: string]: T; }
export const defaultHeaders : Dictionary<string> = { };
export let BASE_PATH = "http://petstore.swagger.io/v1".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: RequestInit;
}

export class BaseAPI {
    basePath: string;

    constructor(basePath?: string) {
        if(!basePath) {
            basePath = BASE_PATH;
        }
        this.basePath = basePath;
    }
};

export interface ModelError {
    "code": number;
    "message": string;
}

export interface Pet {
    "id": number;
    "name": string;
    "tag"?: string;
}

export interface Pets extends Array<Pet> {
}



/**
 * PetsApi - fetch parameter creator
 */
export const PetsApiFetchParamCreator = {
    /** 
     * Create a pet
     */
    createPets(options?: any): FetchArgs {
        const baseUrl = `/pets`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * List all pets
     * @param limit How many items to return at one time (max 100)
     */
    listPets(params: {  "limit"?: number; }, options?: any): FetchArgs {
        const baseUrl = `/pets`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "limit": params["limit"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Info for a specific pet
     * @param petId The id of the pet to retrieve
     */
    showPetById(params: {  "petId": string; }, options?: any): FetchArgs {
        // verify required parameter "petId" is set
        if (params["petId"] == null) {
            throw new Error("Missing required parameter petId when calling showPetById");
        }
        const baseUrl = `/pets/{petId}`
            .replace(`{${"petId"}}`, `${ params["petId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * PetsApi - functional programming interface
 */
export const PetsApiFp = {
    /** 
     * Create a pet
     */
    createPets(options?: any): (basePath?: string) => Promise<any> {
        const fetchArgs = PetsApiFetchParamCreator.createPets(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * List all pets
     * @param limit How many items to return at one time (max 100)
     */
    listPets(params: { "limit"?: number;  }, options?: any): (basePath?: string) => Promise<Pets> {
        const fetchArgs = PetsApiFetchParamCreator.listPets(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Pets>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Info for a specific pet
     * @param petId The id of the pet to retrieve
     */
    showPetById(params: { "petId": string;  }, options?: any): (basePath?: string) => Promise<Pets> {
        const fetchArgs = PetsApiFetchParamCreator.showPetById(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Pets>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * PetsApi - object-oriented interface
 */
export class PetsApi extends BaseAPI {
    /** 
     * Create a pet
     */
    createPets(options?: any) {
        return PetsApiFp.createPets(options)(this.basePath);
    }
    /** 
     * List all pets
     * @param limit How many items to return at one time (max 100)
     */
    listPets(params: {  "limit"?: number; }, options?: any) {
        return PetsApiFp.listPets(params, options)(this.basePath);
    }
    /** 
     * Info for a specific pet
     * @param petId The id of the pet to retrieve
     */
    showPetById(params: {  "petId": string; }, options?: any) {
        return PetsApiFp.showPetById(params, options)(this.basePath);
    }
};

/**
 * PetsApi - factory interface
 */
export const PetsApiFactory = function (basePath?: string) {
    return {
        /** 
         * Create a pet
         */
        createPets(options?: any) {
            return PetsApiFp.createPets(options)(basePath);
        },
        /** 
         * List all pets
         * @param limit How many items to return at one time (max 100)
         */
        listPets(params: {  "limit"?: number; }, options?: any) {
            return PetsApiFp.listPets(params, options)(basePath);
        },
        /** 
         * Info for a specific pet
         * @param petId The id of the pet to retrieve
         */
        showPetById(params: {  "petId": string; }, options?: any) {
            return PetsApiFp.showPetById(params, options)(basePath);
        },
    };
};

