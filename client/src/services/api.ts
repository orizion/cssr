/**
 * CSSR Backend
 * A REST backend for the CSSR application
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";



export interface Dictionary<T> { [index: string]: T; }
export const defaultHeaders : Dictionary<string> = { };
export let BASE_PATH = "https://localhost:8090/".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: RequestInit;
}

export class BaseAPI {
    basePath: string;

    constructor(basePath?: string) {
        if(!basePath) {
            basePath = BASE_PATH;
        }
        this.basePath = basePath;
    }
};

export interface LocalTime {
    "hour"?: number;
    "minute"?: number;
    "nano"?: number;
    "second"?: number;
}

export interface Presentation {
    "abstract"?: string;
    "dateTime"?: Date;
    "location"?: string;
    "presentationId"?: number;
    "speakerId"?: number;
    "title"?: string;
}

export interface Principal {
    "name"?: string;
}

export interface Subscription {
    "drink"?: string;
    "presentationId"?: number;
    /**
     * The type of the sandwich. v for Vegi, f for Meat
     */
    "sandwichType"?: SubscriptionSandwichTypeEnum;
    "subscriptionId"?: number;
    "userId"?: number;
}

export type SubscriptionSandwichTypeEnum = "v" | "f";
export interface User {
    "displayName"?: string;
    "email"?: string;
    "passwordEnc"?: string;
    "tempToken"?: string;
    "tempTokenExpiresAt"?: LocalTime;
    "userId"?: number;
}



/**
 * PresentationcontrollerApi - fetch parameter creator
 */
export const PresentationcontrollerApiFetchParamCreator = {
    /** 
     * addPresentation
     * @param pres pres
     */
    addPresentationUsingPOST(params: {  "pres": Presentation; }, options?: any): FetchArgs {
        // verify required parameter "pres" is set
        if (params["pres"] == null) {
            throw new Error("Missing required parameter pres when calling addPresentationUsingPOST");
        }
        const baseUrl = `/presentation`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["pres"]) {
            fetchOptions.body = JSON.stringify(params["pres"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getFuture
     */
    getFutureUsingGET(options?: any): FetchArgs {
        const baseUrl = `/presentation`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getSingle
     * @param id id
     */
    getSingleUsingGET(params: {  "id": number; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getSingleUsingGET");
        }
        const baseUrl = `/presentation/{id}`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * modifyPresentation
     * @param pres pres
     */
    modifyPresentationUsingPUT(params: {  "pres": Presentation; }, options?: any): FetchArgs {
        // verify required parameter "pres" is set
        if (params["pres"] == null) {
            throw new Error("Missing required parameter pres when calling modifyPresentationUsingPUT");
        }
        const baseUrl = `/presentation`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["pres"]) {
            fetchOptions.body = JSON.stringify(params["pres"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * PresentationcontrollerApi - functional programming interface
 */
export const PresentationcontrollerApiFp = {
    /** 
     * addPresentation
     * @param pres pres
     */
    addPresentationUsingPOST(params: { "pres": Presentation;  }, options?: any): (basePath?: string) => Promise<Presentation> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.addPresentationUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Presentation>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getFuture
     */
    getFutureUsingGET(options?: any): (basePath?: string) => Promise<Array<Presentation>> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.getFutureUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Array<Presentation>>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getSingle
     * @param id id
     */
    getSingleUsingGET(params: { "id": number;  }, options?: any): (basePath?: string) => Promise<Presentation> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.getSingleUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Presentation>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * modifyPresentation
     * @param pres pres
     */
    modifyPresentationUsingPUT(params: { "pres": Presentation;  }, options?: any): (basePath?: string) => Promise<Presentation> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.modifyPresentationUsingPUT(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Presentation>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * PresentationcontrollerApi - object-oriented interface
 */
export class PresentationcontrollerApi extends BaseAPI {
    /** 
     * addPresentation
     * @param pres pres
     */
    addPresentationUsingPOST(params: {  "pres": Presentation; }, options?: any) {
        return PresentationcontrollerApiFp.addPresentationUsingPOST(params, options)(this.basePath);
    }
    /** 
     * getFuture
     */
    getFutureUsingGET(options?: any) {
        return PresentationcontrollerApiFp.getFutureUsingGET(options)(this.basePath);
    }
    /** 
     * getSingle
     * @param id id
     */
    getSingleUsingGET(params: {  "id": number; }, options?: any) {
        return PresentationcontrollerApiFp.getSingleUsingGET(params, options)(this.basePath);
    }
    /** 
     * modifyPresentation
     * @param pres pres
     */
    modifyPresentationUsingPUT(params: {  "pres": Presentation; }, options?: any) {
        return PresentationcontrollerApiFp.modifyPresentationUsingPUT(params, options)(this.basePath);
    }
};

/**
 * PresentationcontrollerApi - factory interface
 */
export const PresentationcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * addPresentation
         * @param pres pres
         */
        addPresentationUsingPOST(params: {  "pres": Presentation; }, options?: any) {
            return PresentationcontrollerApiFp.addPresentationUsingPOST(params, options)(basePath);
        },
        /** 
         * getFuture
         */
        getFutureUsingGET(options?: any) {
            return PresentationcontrollerApiFp.getFutureUsingGET(options)(basePath);
        },
        /** 
         * getSingle
         * @param id id
         */
        getSingleUsingGET(params: {  "id": number; }, options?: any) {
            return PresentationcontrollerApiFp.getSingleUsingGET(params, options)(basePath);
        },
        /** 
         * modifyPresentation
         * @param pres pres
         */
        modifyPresentationUsingPUT(params: {  "pres": Presentation; }, options?: any) {
            return PresentationcontrollerApiFp.modifyPresentationUsingPUT(params, options)(basePath);
        },
    };
};


/**
 * SubscriptioncontrollerApi - fetch parameter creator
 */
export const SubscriptioncontrollerApiFetchParamCreator = {
    /** 
     * addSubscription
     * @param presentationId presentationId
     * @param subscription subscription
     */
    addSubscriptionUsingPOST(params: {  "presentationId": number; "subscription": Subscription; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling addSubscriptionUsingPOST");
        }
        // verify required parameter "subscription" is set
        if (params["subscription"] == null) {
            throw new Error("Missing required parameter subscription when calling addSubscriptionUsingPOST");
        }
        const baseUrl = `/presentation/{presentationId}/subscription`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["subscription"]) {
            fetchOptions.body = JSON.stringify(params["subscription"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * deleteSingle
     * @param presentationId presentationId
     * @param subscriptionId subscriptionId
     */
    deleteSingleUsingDELETE(params: {  "presentationId": number; "subscriptionId": number; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling deleteSingleUsingDELETE");
        }
        // verify required parameter "subscriptionId" is set
        if (params["subscriptionId"] == null) {
            throw new Error("Missing required parameter subscriptionId when calling deleteSingleUsingDELETE");
        }
        const baseUrl = `/presentation/{presentationId}/subscription/{subscriptionId}`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`)
            .replace(`{${"subscriptionId"}}`, `${ params["subscriptionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getSubscriptions
     * @param presentationId presentationId
     */
    getSubscriptionsUsingGET(params: {  "presentationId": number; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling getSubscriptionsUsingGET");
        }
        const baseUrl = `/presentation/{presentationId}/subscription`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * modifySubscription
     * @param subscription subscription
     */
    modifySubscriptionUsingPUT(params: {  "subscription": Subscription; }, options?: any): FetchArgs {
        // verify required parameter "subscription" is set
        if (params["subscription"] == null) {
            throw new Error("Missing required parameter subscription when calling modifySubscriptionUsingPUT");
        }
        const baseUrl = `/presentation/{presentationId}/subscription`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["subscription"]) {
            fetchOptions.body = JSON.stringify(params["subscription"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * SubscriptioncontrollerApi - functional programming interface
 */
export const SubscriptioncontrollerApiFp = {
    /** 
     * addSubscription
     * @param presentationId presentationId
     * @param subscription subscription
     */
    addSubscriptionUsingPOST(params: { "presentationId": number; "subscription": Subscription;  }, options?: any): (basePath?: string) => Promise<Subscription> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.addSubscriptionUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Subscription>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * deleteSingle
     * @param presentationId presentationId
     * @param subscriptionId subscriptionId
     */
    deleteSingleUsingDELETE(params: { "presentationId": number; "subscriptionId": number;  }, options?: any): (basePath?: string) => Promise<Subscription> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.deleteSingleUsingDELETE(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Subscription>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getSubscriptions
     * @param presentationId presentationId
     */
    getSubscriptionsUsingGET(params: { "presentationId": number;  }, options?: any): (basePath?: string) => Promise<Array<Subscription>> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.getSubscriptionsUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Array<Subscription>>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * modifySubscription
     * @param subscription subscription
     */
    modifySubscriptionUsingPUT(params: { "subscription": Subscription;  }, options?: any): (basePath?: string) => Promise<Subscription> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.modifySubscriptionUsingPUT(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Subscription>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * SubscriptioncontrollerApi - object-oriented interface
 */
export class SubscriptioncontrollerApi extends BaseAPI {
    /** 
     * addSubscription
     * @param presentationId presentationId
     * @param subscription subscription
     */
    addSubscriptionUsingPOST(params: {  "presentationId": number; "subscription": Subscription; }, options?: any) {
        return SubscriptioncontrollerApiFp.addSubscriptionUsingPOST(params, options)(this.basePath);
    }
    /** 
     * deleteSingle
     * @param presentationId presentationId
     * @param subscriptionId subscriptionId
     */
    deleteSingleUsingDELETE(params: {  "presentationId": number; "subscriptionId": number; }, options?: any) {
        return SubscriptioncontrollerApiFp.deleteSingleUsingDELETE(params, options)(this.basePath);
    }
    /** 
     * getSubscriptions
     * @param presentationId presentationId
     */
    getSubscriptionsUsingGET(params: {  "presentationId": number; }, options?: any) {
        return SubscriptioncontrollerApiFp.getSubscriptionsUsingGET(params, options)(this.basePath);
    }
    /** 
     * modifySubscription
     * @param subscription subscription
     */
    modifySubscriptionUsingPUT(params: {  "subscription": Subscription; }, options?: any) {
        return SubscriptioncontrollerApiFp.modifySubscriptionUsingPUT(params, options)(this.basePath);
    }
};

/**
 * SubscriptioncontrollerApi - factory interface
 */
export const SubscriptioncontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * addSubscription
         * @param presentationId presentationId
         * @param subscription subscription
         */
        addSubscriptionUsingPOST(params: {  "presentationId": number; "subscription": Subscription; }, options?: any) {
            return SubscriptioncontrollerApiFp.addSubscriptionUsingPOST(params, options)(basePath);
        },
        /** 
         * deleteSingle
         * @param presentationId presentationId
         * @param subscriptionId subscriptionId
         */
        deleteSingleUsingDELETE(params: {  "presentationId": number; "subscriptionId": number; }, options?: any) {
            return SubscriptioncontrollerApiFp.deleteSingleUsingDELETE(params, options)(basePath);
        },
        /** 
         * getSubscriptions
         * @param presentationId presentationId
         */
        getSubscriptionsUsingGET(params: {  "presentationId": number; }, options?: any) {
            return SubscriptioncontrollerApiFp.getSubscriptionsUsingGET(params, options)(basePath);
        },
        /** 
         * modifySubscription
         * @param subscription subscription
         */
        modifySubscriptionUsingPUT(params: {  "subscription": Subscription; }, options?: any) {
            return SubscriptioncontrollerApiFp.modifySubscriptionUsingPUT(params, options)(basePath);
        },
    };
};


/**
 * TestcontrollerApi - fetch parameter creator
 */
export const TestcontrollerApiFetchParamCreator = {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/test`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "name": params["name"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * GetUser
     */
    getUserUsingGET(options?: any): FetchArgs {
        const baseUrl = `/test/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * TestcontrollerApi - functional programming interface
 */
export const TestcontrollerApiFp = {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: { "name"?: string;  }, options?: any): (basePath?: string) => Promise<string> {
        const fetchArgs = TestcontrollerApiFetchParamCreator.getTestUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<string>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * GetUser
     */
    getUserUsingGET(options?: any): (basePath?: string) => Promise<Principal> {
        const fetchArgs = TestcontrollerApiFetchParamCreator.getUserUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Principal>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * TestcontrollerApi - object-oriented interface
 */
export class TestcontrollerApi extends BaseAPI {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any) {
        return TestcontrollerApiFp.getTestUsingGET(params, options)(this.basePath);
    }
    /** 
     * GetUser
     */
    getUserUsingGET(options?: any) {
        return TestcontrollerApiFp.getUserUsingGET(options)(this.basePath);
    }
};

/**
 * TestcontrollerApi - factory interface
 */
export const TestcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * GetTest
         * @param name name
         */
        getTestUsingGET(params: {  "name"?: string; }, options?: any) {
            return TestcontrollerApiFp.getTestUsingGET(params, options)(basePath);
        },
        /** 
         * GetUser
         */
        getUserUsingGET(options?: any) {
            return TestcontrollerApiFp.getUserUsingGET(options)(basePath);
        },
    };
};


/**
 * UsercontrollerApi - fetch parameter creator
 */
export const UsercontrollerApiFetchParamCreator = {
    /** 
     * getAll
     */
    getAllUsingGET(options?: any): FetchArgs {
        const baseUrl = `/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * resetPassword
     */
    resetPasswordUsingPOST(options?: any): FetchArgs {
        const baseUrl = `/user/me/resetPassword`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * UsercontrollerApi - functional programming interface
 */
export const UsercontrollerApiFp = {
    /** 
     * getAll
     */
    getAllUsingGET(options?: any): (basePath?: string) => Promise<Array<User>> {
        const fetchArgs = UsercontrollerApiFetchParamCreator.getAllUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Array<User>>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * resetPassword
     */
    resetPasswordUsingPOST(options?: any): (basePath?: string) => Promise<string> {
        const fetchArgs = UsercontrollerApiFetchParamCreator.resetPasswordUsingPOST(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<string>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * UsercontrollerApi - object-oriented interface
 */
export class UsercontrollerApi extends BaseAPI {
    /** 
     * getAll
     */
    getAllUsingGET(options?: any) {
        return UsercontrollerApiFp.getAllUsingGET(options)(this.basePath);
    }
    /** 
     * resetPassword
     */
    resetPasswordUsingPOST(options?: any) {
        return UsercontrollerApiFp.resetPasswordUsingPOST(options)(this.basePath);
    }
};

/**
 * UsercontrollerApi - factory interface
 */
export const UsercontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * getAll
         */
        getAllUsingGET(options?: any) {
            return UsercontrollerApiFp.getAllUsingGET(options)(basePath);
        },
        /** 
         * resetPassword
         */
        resetPasswordUsingPOST(options?: any) {
            return UsercontrollerApiFp.resetPasswordUsingPOST(options)(basePath);
        },
    };
};

