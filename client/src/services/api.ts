/**
 * CSSR Backend
 * A REST backend for the CSSR application
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";



export interface Dictionary<T> { [index: string]: T; }
export const defaultHeaders : Dictionary<string> = { };
export let BASE_PATH = "https://localhost:8090/".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: RequestInit;
}

export class BaseAPI {
    basePath: string;

    constructor(basePath?: string) {
        if(!basePath) {
            basePath = BASE_PATH;
        }
        this.basePath = basePath;
    }
};



/**
 * TestcontrollerApi - fetch parameter creator
 */
export const TestcontrollerApiFetchParamCreator = {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/test`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "name": params["name"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * TestcontrollerApi - functional programming interface
 */
export const TestcontrollerApiFp = {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: { "name"?: string;  }, options?: any): (basePath?: string) => Promise<string> {
        const fetchArgs = TestcontrollerApiFetchParamCreator.getTestUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<string>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * TestcontrollerApi - object-oriented interface
 */
export class TestcontrollerApi extends BaseAPI {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any) {
        return TestcontrollerApiFp.getTestUsingGET(params, options)(this.basePath);
    }
};

/**
 * TestcontrollerApi - factory interface
 */
export const TestcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * GetTest
         * @param name name
         */
        getTestUsingGET(params: {  "name"?: string; }, options?: any) {
            return TestcontrollerApiFp.getTestUsingGET(params, options)(basePath);
        },
    };
};

