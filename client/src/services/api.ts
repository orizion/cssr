/**
 * CSSR Backend
 * A REST backend for the CSSR application
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";



export interface Dictionary<T> { [index: string]: T; }
export const defaultHeaders : Dictionary<string> = { };
export let BASE_PATH = "https://localhost:8090/".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: RequestInit;
}

export class BaseAPI {
    basePath: string;

    constructor(basePath?: string) {
        if(!basePath) {
            basePath = BASE_PATH;
        }
        this.basePath = basePath;
    }
};

export interface ModelAndView {
    "empty"?: boolean;
    "model"?: any;
    "modelMap"?: { [key: string]: any; };
    "reference"?: boolean;
    "status"?: ModelAndViewStatusEnum;
    "view"?: View;
    "viewName"?: string;
}

export type ModelAndViewStatusEnum = "100" | "101" | "102" | "103" | "200" | "201" | "202" | "203" | "204" | "205" | "206" | "207" | "208" | "226" | "300" | "301" | "302" | "303" | "304" | "305" | "307" | "308" | "400" | "401" | "402" | "403" | "404" | "405" | "406" | "407" | "408" | "409" | "410" | "411" | "412" | "413" | "414" | "415" | "416" | "417" | "418" | "419" | "420" | "421" | "422" | "423" | "424" | "426" | "428" | "429" | "431" | "451" | "500" | "501" | "502" | "503" | "504" | "505" | "506" | "507" | "508" | "509" | "510" | "511";
export interface View {
    "contentType"?: string;
}



/**
 * BasicerrorcontrollerApi - fetch parameter creator
 */
export const BasicerrorcontrollerApiFetchParamCreator = {
    /** 
     * errorHtml
     */
    errorHtmlUsingDELETE(options?: any): FetchArgs {
        const baseUrl = `/error`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingGET(options?: any): FetchArgs {
        const baseUrl = `/error`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingHEAD(options?: any): FetchArgs {
        const baseUrl = `/error`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "HEAD" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingOPTIONS(options?: any): FetchArgs {
        const baseUrl = `/error`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingPATCH(options?: any): FetchArgs {
        const baseUrl = `/error`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PATCH" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingPOST(options?: any): FetchArgs {
        const baseUrl = `/error`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingPUT(options?: any): FetchArgs {
        const baseUrl = `/error`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * BasicerrorcontrollerApi - functional programming interface
 */
export const BasicerrorcontrollerApiFp = {
    /** 
     * errorHtml
     */
    errorHtmlUsingDELETE(options?: any): (basePath?: string) => Promise<ModelAndView> {
        const fetchArgs = BasicerrorcontrollerApiFetchParamCreator.errorHtmlUsingDELETE(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<ModelAndView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingGET(options?: any): (basePath?: string) => Promise<ModelAndView> {
        const fetchArgs = BasicerrorcontrollerApiFetchParamCreator.errorHtmlUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<ModelAndView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingHEAD(options?: any): (basePath?: string) => Promise<ModelAndView> {
        const fetchArgs = BasicerrorcontrollerApiFetchParamCreator.errorHtmlUsingHEAD(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<ModelAndView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingOPTIONS(options?: any): (basePath?: string) => Promise<ModelAndView> {
        const fetchArgs = BasicerrorcontrollerApiFetchParamCreator.errorHtmlUsingOPTIONS(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<ModelAndView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingPATCH(options?: any): (basePath?: string) => Promise<ModelAndView> {
        const fetchArgs = BasicerrorcontrollerApiFetchParamCreator.errorHtmlUsingPATCH(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<ModelAndView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingPOST(options?: any): (basePath?: string) => Promise<ModelAndView> {
        const fetchArgs = BasicerrorcontrollerApiFetchParamCreator.errorHtmlUsingPOST(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<ModelAndView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * errorHtml
     */
    errorHtmlUsingPUT(options?: any): (basePath?: string) => Promise<ModelAndView> {
        const fetchArgs = BasicerrorcontrollerApiFetchParamCreator.errorHtmlUsingPUT(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<ModelAndView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * BasicerrorcontrollerApi - object-oriented interface
 */
export class BasicerrorcontrollerApi extends BaseAPI {
    /** 
     * errorHtml
     */
    errorHtmlUsingDELETE(options?: any) {
        return BasicerrorcontrollerApiFp.errorHtmlUsingDELETE(options)(this.basePath);
    }
    /** 
     * errorHtml
     */
    errorHtmlUsingGET(options?: any) {
        return BasicerrorcontrollerApiFp.errorHtmlUsingGET(options)(this.basePath);
    }
    /** 
     * errorHtml
     */
    errorHtmlUsingHEAD(options?: any) {
        return BasicerrorcontrollerApiFp.errorHtmlUsingHEAD(options)(this.basePath);
    }
    /** 
     * errorHtml
     */
    errorHtmlUsingOPTIONS(options?: any) {
        return BasicerrorcontrollerApiFp.errorHtmlUsingOPTIONS(options)(this.basePath);
    }
    /** 
     * errorHtml
     */
    errorHtmlUsingPATCH(options?: any) {
        return BasicerrorcontrollerApiFp.errorHtmlUsingPATCH(options)(this.basePath);
    }
    /** 
     * errorHtml
     */
    errorHtmlUsingPOST(options?: any) {
        return BasicerrorcontrollerApiFp.errorHtmlUsingPOST(options)(this.basePath);
    }
    /** 
     * errorHtml
     */
    errorHtmlUsingPUT(options?: any) {
        return BasicerrorcontrollerApiFp.errorHtmlUsingPUT(options)(this.basePath);
    }
};

/**
 * BasicerrorcontrollerApi - factory interface
 */
export const BasicerrorcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * errorHtml
         */
        errorHtmlUsingDELETE(options?: any) {
            return BasicerrorcontrollerApiFp.errorHtmlUsingDELETE(options)(basePath);
        },
        /** 
         * errorHtml
         */
        errorHtmlUsingGET(options?: any) {
            return BasicerrorcontrollerApiFp.errorHtmlUsingGET(options)(basePath);
        },
        /** 
         * errorHtml
         */
        errorHtmlUsingHEAD(options?: any) {
            return BasicerrorcontrollerApiFp.errorHtmlUsingHEAD(options)(basePath);
        },
        /** 
         * errorHtml
         */
        errorHtmlUsingOPTIONS(options?: any) {
            return BasicerrorcontrollerApiFp.errorHtmlUsingOPTIONS(options)(basePath);
        },
        /** 
         * errorHtml
         */
        errorHtmlUsingPATCH(options?: any) {
            return BasicerrorcontrollerApiFp.errorHtmlUsingPATCH(options)(basePath);
        },
        /** 
         * errorHtml
         */
        errorHtmlUsingPOST(options?: any) {
            return BasicerrorcontrollerApiFp.errorHtmlUsingPOST(options)(basePath);
        },
        /** 
         * errorHtml
         */
        errorHtmlUsingPUT(options?: any) {
            return BasicerrorcontrollerApiFp.errorHtmlUsingPUT(options)(basePath);
        },
    };
};


/**
 * TestcontrollerApi - fetch parameter creator
 */
export const TestcontrollerApiFetchParamCreator = {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/test`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "name": params["name"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * TestcontrollerApi - functional programming interface
 */
export const TestcontrollerApiFp = {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: { "name"?: string;  }, options?: any): (basePath?: string) => Promise<string> {
        const fetchArgs = TestcontrollerApiFetchParamCreator.getTestUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<string>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * TestcontrollerApi - object-oriented interface
 */
export class TestcontrollerApi extends BaseAPI {
    /** 
     * GetTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any) {
        return TestcontrollerApiFp.getTestUsingGET(params, options)(this.basePath);
    }
};

/**
 * TestcontrollerApi - factory interface
 */
export const TestcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * GetTest
         * @param name name
         */
        getTestUsingGET(params: {  "name"?: string; }, options?: any) {
            return TestcontrollerApiFp.getTestUsingGET(params, options)(basePath);
        },
    };
};

