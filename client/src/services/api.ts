/* tslint:disable */

/**
 * CSSR Backend
 * A REST backend for the CSSR application
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";



export interface Dictionary<T> { [index: string]: T; }
export const defaultHeaders : Dictionary<string> = { };
export let BASE_PATH = "http://localhost:8090".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: RequestInit;
}

export class BaseAPI {
    basePath: string;

    constructor(basePath?: string) {
        if(!basePath) {
            basePath = BASE_PATH;
        }
        this.basePath = basePath;
    }
};

export interface AccountCredentials {
    "email"?: string;
    "password"?: string;
}

export interface Email {
    "bcc"?: string;
    "body"?: string;
    "cc"?: string;
    "emailId"?: number;
    "error"?: string;
    "insertedAt"?: Date;
    "sentDate"?: Date;
    "subject"?: string;
    "to"?: string;
    "tryCount"?: number;
}

export interface EmailView {
    "bcc"?: string;
    "body"?: string;
    "cc"?: string;
    "subject"?: string;
    "to"?: string;
}

export interface Presentation {
    "abstract"?: string;
    "dateTime"?: Date;
    "deadline"?: Date;
    "location"?: string;
    "presentationId"?: number;
    "speakerId"?: number;
    "title"?: string;
}

export interface PresentationFileMeta {
    "contentLink"?: string;
    "contentType"?: string;
    "displayName"?: string;
    "presentationFileId"?: number;
    "presentationId"?: number;
    /**
     * The type of the file. f for Presentation, r for Ressource
     */
    "type"?: PresentationFileMetaTypeEnum;
}

export type PresentationFileMetaTypeEnum = "f" | "r";
export interface Principal {
    "name"?: string;
}

export interface Subscription {
    "drink"?: string;
    "presentationId"?: number;
    /**
     * The type of the sandwich. v for Vegi, f for Meat
     */
    "sandwichType"?: SubscriptionSandwichTypeEnum;
    "subscriptionId"?: number;
    "user"?: User;
    "userId"?: number;
}

export type SubscriptionSandwichTypeEnum = "v" | "f";
export interface TokenResult {
    "token"?: string;
}

export interface User {
    "displayName"?: string;
    "email"?: string;
    "extern"?: boolean;
    "passwordEnc"?: string;
    "roleId"?: number;
    "tempToken"?: string;
    "tempTokenExpiresAt"?: Date;
    "userId"?: number;
}

export interface UserAddMeta {
    "displayName"?: string;
    "email"?: string;
}

export interface UserMeta {
    "authorities"?: Array<string>;
    "email"?: string;
    "extern"?: boolean;
    "userId"?: number;
}



/**
 * PresentationcontrollerApi - fetch parameter creator
 */
export const PresentationcontrollerApiFetchParamCreator = {
    /** 
     * addPresentation
     * @param pres pres
     */
    addPresentationUsingPOST(params: {  "pres": Presentation; }, options?: any): FetchArgs {
        // verify required parameter "pres" is set
        if (params["pres"] == null) {
            throw new Error("Missing required parameter pres when calling addPresentationUsingPOST");
        }
        const baseUrl = `/presentation`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["pres"]) {
            fetchOptions.body = JSON.stringify(params["pres"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * findAll
     * @param futureOnly futureOnly
     */
    findAllUsingGET(params: {  "futureOnly": boolean; }, options?: any): FetchArgs {
        // verify required parameter "futureOnly" is set
        if (params["futureOnly"] == null) {
            throw new Error("Missing required parameter futureOnly when calling findAllUsingGET");
        }
        const baseUrl = `/presentation`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "futureOnly": params["futureOnly"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getSingle
     * @param id id
     */
    getSingleUsingGET(params: {  "id": number; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getSingleUsingGET");
        }
        const baseUrl = `/presentation/{id}`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * modifyPresentation
     * @param pres pres
     */
    modifyPresentationUsingPUT(params: {  "pres": Presentation; }, options?: any): FetchArgs {
        // verify required parameter "pres" is set
        if (params["pres"] == null) {
            throw new Error("Missing required parameter pres when calling modifyPresentationUsingPUT");
        }
        const baseUrl = `/presentation`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["pres"]) {
            fetchOptions.body = JSON.stringify(params["pres"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * PresentationcontrollerApi - functional programming interface
 */
export const PresentationcontrollerApiFp = {
    /** 
     * addPresentation
     * @param pres pres
     */
    addPresentationUsingPOST(params: { "pres": Presentation;  }, options?: any): (basePath?: string) => Promise<Presentation> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.addPresentationUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Presentation>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * findAll
     * @param futureOnly futureOnly
     */
    findAllUsingGET(params: { "futureOnly": boolean;  }, options?: any): (basePath?: string) => Promise<Array<Presentation>> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.findAllUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Array<Presentation>>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getSingle
     * @param id id
     */
    getSingleUsingGET(params: { "id": number;  }, options?: any): (basePath?: string) => Promise<Presentation> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.getSingleUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Presentation>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * modifyPresentation
     * @param pres pres
     */
    modifyPresentationUsingPUT(params: { "pres": Presentation;  }, options?: any): (basePath?: string) => Promise<Presentation> {
        const fetchArgs = PresentationcontrollerApiFetchParamCreator.modifyPresentationUsingPUT(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Presentation>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * PresentationcontrollerApi - object-oriented interface
 */
export class PresentationcontrollerApi extends BaseAPI {
    /** 
     * addPresentation
     * @param pres pres
     */
    addPresentationUsingPOST(params: {  "pres": Presentation; }, options?: any) {
        return PresentationcontrollerApiFp.addPresentationUsingPOST(params, options)(this.basePath);
    }
    /** 
     * findAll
     * @param futureOnly futureOnly
     */
    findAllUsingGET(params: {  "futureOnly": boolean; }, options?: any) {
        return PresentationcontrollerApiFp.findAllUsingGET(params, options)(this.basePath);
    }
    /** 
     * getSingle
     * @param id id
     */
    getSingleUsingGET(params: {  "id": number; }, options?: any) {
        return PresentationcontrollerApiFp.getSingleUsingGET(params, options)(this.basePath);
    }
    /** 
     * modifyPresentation
     * @param pres pres
     */
    modifyPresentationUsingPUT(params: {  "pres": Presentation; }, options?: any) {
        return PresentationcontrollerApiFp.modifyPresentationUsingPUT(params, options)(this.basePath);
    }
};

/**
 * PresentationcontrollerApi - factory interface
 */
export const PresentationcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * addPresentation
         * @param pres pres
         */
        addPresentationUsingPOST(params: {  "pres": Presentation; }, options?: any) {
            return PresentationcontrollerApiFp.addPresentationUsingPOST(params, options)(basePath);
        },
        /** 
         * findAll
         * @param futureOnly futureOnly
         */
        findAllUsingGET(params: {  "futureOnly": boolean; }, options?: any) {
            return PresentationcontrollerApiFp.findAllUsingGET(params, options)(basePath);
        },
        /** 
         * getSingle
         * @param id id
         */
        getSingleUsingGET(params: {  "id": number; }, options?: any) {
            return PresentationcontrollerApiFp.getSingleUsingGET(params, options)(basePath);
        },
        /** 
         * modifyPresentation
         * @param pres pres
         */
        modifyPresentationUsingPUT(params: {  "pres": Presentation; }, options?: any) {
            return PresentationcontrollerApiFp.modifyPresentationUsingPUT(params, options)(basePath);
        },
    };
};


/**
 * PresentationfilecontrollerApi - fetch parameter creator
 */
export const PresentationfilecontrollerApiFetchParamCreator = {
    /** 
     * addFileBinary
     * @param presentationId presentationId
     * @param content content
     * @param type type
     * @param displayName displayName
     * @param contentType contentType
     */
    addFileBinaryUsingPOST(params: {  "presentationId": number; "content": string; "type": string; "displayName": string; "contentType": string; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling addFileBinaryUsingPOST");
        }
        // verify required parameter "content" is set
        if (params["content"] == null) {
            throw new Error("Missing required parameter content when calling addFileBinaryUsingPOST");
        }
        // verify required parameter "type" is set
        if (params["type"] == null) {
            throw new Error("Missing required parameter type when calling addFileBinaryUsingPOST");
        }
        // verify required parameter "displayName" is set
        if (params["displayName"] == null) {
            throw new Error("Missing required parameter displayName when calling addFileBinaryUsingPOST");
        }
        // verify required parameter "contentType" is set
        if (params["contentType"] == null) {
            throw new Error("Missing required parameter contentType when calling addFileBinaryUsingPOST");
        }
        const baseUrl = `/presentation/{presentationId}/file/binary`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "type": params["type"],
            "displayName": params["displayName"],
            "contentType": params["contentType"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["content"]) {
            fetchOptions.body = JSON.stringify(params["content"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * addFileLink
     * @param presentationId presentationId
     * @param file file
     */
    addFileLinkUsingPOST(params: {  "presentationId": number; "file": PresentationFileMeta; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling addFileLinkUsingPOST");
        }
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling addFileLinkUsingPOST");
        }
        const baseUrl = `/presentation/{presentationId}/file/link`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["file"]) {
            fetchOptions.body = JSON.stringify(params["file"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * deleteFile
     * @param presentationId presentationId
     * @param fileId fileId
     */
    deleteFileUsingDELETE(params: {  "presentationId": number; "fileId": number; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling deleteFileUsingDELETE");
        }
        // verify required parameter "fileId" is set
        if (params["fileId"] == null) {
            throw new Error("Missing required parameter fileId when calling deleteFileUsingDELETE");
        }
        const baseUrl = `/presentation/{presentationId}/file/{fileId}`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`)
            .replace(`{${"fileId"}}`, `${ params["fileId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getFile
     * @param presentationId presentationId
     * @param fileId fileId
     * @param tempToken tempToken
     */
    getFileUsingGET(params: {  "presentationId": number; "fileId": number; "tempToken"?: string; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling getFileUsingGET");
        }
        // verify required parameter "fileId" is set
        if (params["fileId"] == null) {
            throw new Error("Missing required parameter fileId when calling getFileUsingGET");
        }
        const baseUrl = `/presentation/{presentationId}/file/{fileId}`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`)
            .replace(`{${"fileId"}}`, `${ params["fileId"] }`);
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "tempToken": params["tempToken"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getFiles
     * @param presentationId presentationId
     */
    getFilesUsingGET(params: {  "presentationId": number; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling getFilesUsingGET");
        }
        const baseUrl = `/presentation/{presentationId}/file`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * PresentationfilecontrollerApi - functional programming interface
 */
export const PresentationfilecontrollerApiFp = {
    /** 
     * addFileBinary
     * @param presentationId presentationId
     * @param content content
     * @param type type
     * @param displayName displayName
     * @param contentType contentType
     */
    addFileBinaryUsingPOST(params: { "presentationId": number; "content": string; "type": string; "displayName": string; "contentType": string;  }, options?: any): (basePath?: string) => Promise<PresentationFileMeta> {
        const fetchArgs = PresentationfilecontrollerApiFetchParamCreator.addFileBinaryUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<PresentationFileMeta>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * addFileLink
     * @param presentationId presentationId
     * @param file file
     */
    addFileLinkUsingPOST(params: { "presentationId": number; "file": PresentationFileMeta;  }, options?: any): (basePath?: string) => Promise<PresentationFileMeta> {
        const fetchArgs = PresentationfilecontrollerApiFetchParamCreator.addFileLinkUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<PresentationFileMeta>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * deleteFile
     * @param presentationId presentationId
     * @param fileId fileId
     */
    deleteFileUsingDELETE(params: { "presentationId": number; "fileId": number;  }, options?: any): (basePath?: string) => Promise<PresentationFileMeta> {
        const fetchArgs = PresentationfilecontrollerApiFetchParamCreator.deleteFileUsingDELETE(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<PresentationFileMeta>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getFile
     * @param presentationId presentationId
     * @param fileId fileId
     * @param tempToken tempToken
     */
    getFileUsingGET(params: { "presentationId": number; "fileId": number; "tempToken"?: string;  }, options?: any): (basePath?: string) => Promise<any> {
        const fetchArgs = PresentationfilecontrollerApiFetchParamCreator.getFileUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getFiles
     * @param presentationId presentationId
     */
    getFilesUsingGET(params: { "presentationId": number;  }, options?: any): (basePath?: string) => Promise<Array<PresentationFileMeta>> {
        const fetchArgs = PresentationfilecontrollerApiFetchParamCreator.getFilesUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Array<PresentationFileMeta>>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * PresentationfilecontrollerApi - object-oriented interface
 */
export class PresentationfilecontrollerApi extends BaseAPI {
    /** 
     * addFileBinary
     * @param presentationId presentationId
     * @param content content
     * @param type type
     * @param displayName displayName
     * @param contentType contentType
     */
    addFileBinaryUsingPOST(params: {  "presentationId": number; "content": string; "type": string; "displayName": string; "contentType": string; }, options?: any) {
        return PresentationfilecontrollerApiFp.addFileBinaryUsingPOST(params, options)(this.basePath);
    }
    /** 
     * addFileLink
     * @param presentationId presentationId
     * @param file file
     */
    addFileLinkUsingPOST(params: {  "presentationId": number; "file": PresentationFileMeta; }, options?: any) {
        return PresentationfilecontrollerApiFp.addFileLinkUsingPOST(params, options)(this.basePath);
    }
    /** 
     * deleteFile
     * @param presentationId presentationId
     * @param fileId fileId
     */
    deleteFileUsingDELETE(params: {  "presentationId": number; "fileId": number; }, options?: any) {
        return PresentationfilecontrollerApiFp.deleteFileUsingDELETE(params, options)(this.basePath);
    }
    /** 
     * getFile
     * @param presentationId presentationId
     * @param fileId fileId
     * @param tempToken tempToken
     */
    getFileUsingGET(params: {  "presentationId": number; "fileId": number; "tempToken"?: string; }, options?: any) {
        return PresentationfilecontrollerApiFp.getFileUsingGET(params, options)(this.basePath);
    }
    /** 
     * getFiles
     * @param presentationId presentationId
     */
    getFilesUsingGET(params: {  "presentationId": number; }, options?: any) {
        return PresentationfilecontrollerApiFp.getFilesUsingGET(params, options)(this.basePath);
    }
};

/**
 * PresentationfilecontrollerApi - factory interface
 */
export const PresentationfilecontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * addFileBinary
         * @param presentationId presentationId
         * @param content content
         * @param type type
         * @param displayName displayName
         * @param contentType contentType
         */
        addFileBinaryUsingPOST(params: {  "presentationId": number; "content": string; "type": string; "displayName": string; "contentType": string; }, options?: any) {
            return PresentationfilecontrollerApiFp.addFileBinaryUsingPOST(params, options)(basePath);
        },
        /** 
         * addFileLink
         * @param presentationId presentationId
         * @param file file
         */
        addFileLinkUsingPOST(params: {  "presentationId": number; "file": PresentationFileMeta; }, options?: any) {
            return PresentationfilecontrollerApiFp.addFileLinkUsingPOST(params, options)(basePath);
        },
        /** 
         * deleteFile
         * @param presentationId presentationId
         * @param fileId fileId
         */
        deleteFileUsingDELETE(params: {  "presentationId": number; "fileId": number; }, options?: any) {
            return PresentationfilecontrollerApiFp.deleteFileUsingDELETE(params, options)(basePath);
        },
        /** 
         * getFile
         * @param presentationId presentationId
         * @param fileId fileId
         * @param tempToken tempToken
         */
        getFileUsingGET(params: {  "presentationId": number; "fileId": number; "tempToken"?: string; }, options?: any) {
            return PresentationfilecontrollerApiFp.getFileUsingGET(params, options)(basePath);
        },
        /** 
         * getFiles
         * @param presentationId presentationId
         */
        getFilesUsingGET(params: {  "presentationId": number; }, options?: any) {
            return PresentationfilecontrollerApiFp.getFilesUsingGET(params, options)(basePath);
        },
    };
};


/**
 * PresentationmailcontrollerApi - fetch parameter creator
 */
export const PresentationmailcontrollerApiFetchParamCreator = {
    /** 
     * getInvitationMailTemplate
     * @param id id
     */
    getInvitationMailTemplateUsingGET(params: {  "id": number; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling getInvitationMailTemplateUsingGET");
        }
        const baseUrl = `/presentation/{id}/invitation/template`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * sendInvitationMail
     * @param id id
     * @param mail mail
     */
    sendInvitationMailUsingPOST(params: {  "id": number; "mail": EmailView; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling sendInvitationMailUsingPOST");
        }
        // verify required parameter "mail" is set
        if (params["mail"] == null) {
            throw new Error("Missing required parameter mail when calling sendInvitationMailUsingPOST");
        }
        const baseUrl = `/presentation/{id}/invitation/send`
            .replace(`{${"id"}}`, `${ params["id"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["mail"]) {
            fetchOptions.body = JSON.stringify(params["mail"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * PresentationmailcontrollerApi - functional programming interface
 */
export const PresentationmailcontrollerApiFp = {
    /** 
     * getInvitationMailTemplate
     * @param id id
     */
    getInvitationMailTemplateUsingGET(params: { "id": number;  }, options?: any): (basePath?: string) => Promise<EmailView> {
        const fetchArgs = PresentationmailcontrollerApiFetchParamCreator.getInvitationMailTemplateUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<EmailView>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * sendInvitationMail
     * @param id id
     * @param mail mail
     */
    sendInvitationMailUsingPOST(params: { "id": number; "mail": EmailView;  }, options?: any): (basePath?: string) => Promise<Email> {
        const fetchArgs = PresentationmailcontrollerApiFetchParamCreator.sendInvitationMailUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Email>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * PresentationmailcontrollerApi - object-oriented interface
 */
export class PresentationmailcontrollerApi extends BaseAPI {
    /** 
     * getInvitationMailTemplate
     * @param id id
     */
    getInvitationMailTemplateUsingGET(params: {  "id": number; }, options?: any) {
        return PresentationmailcontrollerApiFp.getInvitationMailTemplateUsingGET(params, options)(this.basePath);
    }
    /** 
     * sendInvitationMail
     * @param id id
     * @param mail mail
     */
    sendInvitationMailUsingPOST(params: {  "id": number; "mail": EmailView; }, options?: any) {
        return PresentationmailcontrollerApiFp.sendInvitationMailUsingPOST(params, options)(this.basePath);
    }
};

/**
 * PresentationmailcontrollerApi - factory interface
 */
export const PresentationmailcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * getInvitationMailTemplate
         * @param id id
         */
        getInvitationMailTemplateUsingGET(params: {  "id": number; }, options?: any) {
            return PresentationmailcontrollerApiFp.getInvitationMailTemplateUsingGET(params, options)(basePath);
        },
        /** 
         * sendInvitationMail
         * @param id id
         * @param mail mail
         */
        sendInvitationMailUsingPOST(params: {  "id": number; "mail": EmailView; }, options?: any) {
            return PresentationmailcontrollerApiFp.sendInvitationMailUsingPOST(params, options)(basePath);
        },
    };
};


/**
 * SubscriptioncontrollerApi - fetch parameter creator
 */
export const SubscriptioncontrollerApiFetchParamCreator = {
    /** 
     * addSubscription
     * @param presentationId presentationId
     * @param subscription subscription
     */
    addSubscriptionUsingPOST(params: {  "presentationId": number; "subscription": Subscription; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling addSubscriptionUsingPOST");
        }
        // verify required parameter "subscription" is set
        if (params["subscription"] == null) {
            throw new Error("Missing required parameter subscription when calling addSubscriptionUsingPOST");
        }
        const baseUrl = `/presentation/{presentationId}/subscription`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["subscription"]) {
            fetchOptions.body = JSON.stringify(params["subscription"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * deleteSingle
     * @param presentationId presentationId
     * @param subscriptionId subscriptionId
     */
    deleteSingleUsingDELETE(params: {  "presentationId": number; "subscriptionId": number; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling deleteSingleUsingDELETE");
        }
        // verify required parameter "subscriptionId" is set
        if (params["subscriptionId"] == null) {
            throw new Error("Missing required parameter subscriptionId when calling deleteSingleUsingDELETE");
        }
        const baseUrl = `/presentation/{presentationId}/subscription/{subscriptionId}`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`)
            .replace(`{${"subscriptionId"}}`, `${ params["subscriptionId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getSubscriptions
     * @param presentationId presentationId
     */
    getSubscriptionsUsingGET(params: {  "presentationId": number; }, options?: any): FetchArgs {
        // verify required parameter "presentationId" is set
        if (params["presentationId"] == null) {
            throw new Error("Missing required parameter presentationId when calling getSubscriptionsUsingGET");
        }
        const baseUrl = `/presentation/{presentationId}/subscription`
            .replace(`{${"presentationId"}}`, `${ params["presentationId"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * modifySubscription
     * @param subscription subscription
     */
    modifySubscriptionUsingPUT(params: {  "subscription": Subscription; }, options?: any): FetchArgs {
        // verify required parameter "subscription" is set
        if (params["subscription"] == null) {
            throw new Error("Missing required parameter subscription when calling modifySubscriptionUsingPUT");
        }
        const baseUrl = `/presentation/{presentationId}/subscription`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["subscription"]) {
            fetchOptions.body = JSON.stringify(params["subscription"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * SubscriptioncontrollerApi - functional programming interface
 */
export const SubscriptioncontrollerApiFp = {
    /** 
     * addSubscription
     * @param presentationId presentationId
     * @param subscription subscription
     */
    addSubscriptionUsingPOST(params: { "presentationId": number; "subscription": Subscription;  }, options?: any): (basePath?: string) => Promise<Subscription> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.addSubscriptionUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Subscription>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * deleteSingle
     * @param presentationId presentationId
     * @param subscriptionId subscriptionId
     */
    deleteSingleUsingDELETE(params: { "presentationId": number; "subscriptionId": number;  }, options?: any): (basePath?: string) => Promise<Subscription> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.deleteSingleUsingDELETE(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Subscription>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getSubscriptions
     * @param presentationId presentationId
     */
    getSubscriptionsUsingGET(params: { "presentationId": number;  }, options?: any): (basePath?: string) => Promise<Array<Subscription>> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.getSubscriptionsUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Array<Subscription>>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * modifySubscription
     * @param subscription subscription
     */
    modifySubscriptionUsingPUT(params: { "subscription": Subscription;  }, options?: any): (basePath?: string) => Promise<Subscription> {
        const fetchArgs = SubscriptioncontrollerApiFetchParamCreator.modifySubscriptionUsingPUT(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Subscription>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * SubscriptioncontrollerApi - object-oriented interface
 */
export class SubscriptioncontrollerApi extends BaseAPI {
    /** 
     * addSubscription
     * @param presentationId presentationId
     * @param subscription subscription
     */
    addSubscriptionUsingPOST(params: {  "presentationId": number; "subscription": Subscription; }, options?: any) {
        return SubscriptioncontrollerApiFp.addSubscriptionUsingPOST(params, options)(this.basePath);
    }
    /** 
     * deleteSingle
     * @param presentationId presentationId
     * @param subscriptionId subscriptionId
     */
    deleteSingleUsingDELETE(params: {  "presentationId": number; "subscriptionId": number; }, options?: any) {
        return SubscriptioncontrollerApiFp.deleteSingleUsingDELETE(params, options)(this.basePath);
    }
    /** 
     * getSubscriptions
     * @param presentationId presentationId
     */
    getSubscriptionsUsingGET(params: {  "presentationId": number; }, options?: any) {
        return SubscriptioncontrollerApiFp.getSubscriptionsUsingGET(params, options)(this.basePath);
    }
    /** 
     * modifySubscription
     * @param subscription subscription
     */
    modifySubscriptionUsingPUT(params: {  "subscription": Subscription; }, options?: any) {
        return SubscriptioncontrollerApiFp.modifySubscriptionUsingPUT(params, options)(this.basePath);
    }
};

/**
 * SubscriptioncontrollerApi - factory interface
 */
export const SubscriptioncontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * addSubscription
         * @param presentationId presentationId
         * @param subscription subscription
         */
        addSubscriptionUsingPOST(params: {  "presentationId": number; "subscription": Subscription; }, options?: any) {
            return SubscriptioncontrollerApiFp.addSubscriptionUsingPOST(params, options)(basePath);
        },
        /** 
         * deleteSingle
         * @param presentationId presentationId
         * @param subscriptionId subscriptionId
         */
        deleteSingleUsingDELETE(params: {  "presentationId": number; "subscriptionId": number; }, options?: any) {
            return SubscriptioncontrollerApiFp.deleteSingleUsingDELETE(params, options)(basePath);
        },
        /** 
         * getSubscriptions
         * @param presentationId presentationId
         */
        getSubscriptionsUsingGET(params: {  "presentationId": number; }, options?: any) {
            return SubscriptioncontrollerApiFp.getSubscriptionsUsingGET(params, options)(basePath);
        },
        /** 
         * modifySubscription
         * @param subscription subscription
         */
        modifySubscriptionUsingPUT(params: {  "subscription": Subscription; }, options?: any) {
            return SubscriptioncontrollerApiFp.modifySubscriptionUsingPUT(params, options)(basePath);
        },
    };
};


/**
 * TestcontrollerApi - fetch parameter creator
 */
export const TestcontrollerApiFetchParamCreator = {
    /** 
     * getNow
     */
    getNowUsingGET(options?: any): FetchArgs {
        const baseUrl = `/test/date`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/test`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "name": params["name"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getUser
     */
    getUserUsingGET(options?: any): FetchArgs {
        const baseUrl = `/test/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * TestcontrollerApi - functional programming interface
 */
export const TestcontrollerApiFp = {
    /** 
     * getNow
     */
    getNowUsingGET(options?: any): (basePath?: string) => Promise<Date> {
        const fetchArgs = TestcontrollerApiFetchParamCreator.getNowUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Date>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getTest
     * @param name name
     */
    getTestUsingGET(params: { "name"?: string;  }, options?: any): (basePath?: string) => Promise<string> {
        const fetchArgs = TestcontrollerApiFetchParamCreator.getTestUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<string>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getUser
     */
    getUserUsingGET(options?: any): (basePath?: string) => Promise<Principal> {
        const fetchArgs = TestcontrollerApiFetchParamCreator.getUserUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Principal>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * TestcontrollerApi - object-oriented interface
 */
export class TestcontrollerApi extends BaseAPI {
    /** 
     * getNow
     */
    getNowUsingGET(options?: any) {
        return TestcontrollerApiFp.getNowUsingGET(options)(this.basePath);
    }
    /** 
     * getTest
     * @param name name
     */
    getTestUsingGET(params: {  "name"?: string; }, options?: any) {
        return TestcontrollerApiFp.getTestUsingGET(params, options)(this.basePath);
    }
    /** 
     * getUser
     */
    getUserUsingGET(options?: any) {
        return TestcontrollerApiFp.getUserUsingGET(options)(this.basePath);
    }
};

/**
 * TestcontrollerApi - factory interface
 */
export const TestcontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * getNow
         */
        getNowUsingGET(options?: any) {
            return TestcontrollerApiFp.getNowUsingGET(options)(basePath);
        },
        /** 
         * getTest
         * @param name name
         */
        getTestUsingGET(params: {  "name"?: string; }, options?: any) {
            return TestcontrollerApiFp.getTestUsingGET(params, options)(basePath);
        },
        /** 
         * getUser
         */
        getUserUsingGET(options?: any) {
            return TestcontrollerApiFp.getUserUsingGET(options)(basePath);
        },
    };
};


/**
 * UseradmincontrollerApi - fetch parameter creator
 */
export const UseradmincontrollerApiFetchParamCreator = {
    /** 
     * addUser
     * @param newUserData newUserData
     */
    addUserUsingPOST(params: {  "newUserData": UserAddMeta; }, options?: any): FetchArgs {
        // verify required parameter "newUserData" is set
        if (params["newUserData"] == null) {
            throw new Error("Missing required parameter newUserData when calling addUserUsingPOST");
        }
        const baseUrl = `/admin/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["newUserData"]) {
            fetchOptions.body = JSON.stringify(params["newUserData"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * modifyUser
     * @param userData userData
     */
    modifyUserUsingPUT(params: {  "userData": User; }, options?: any): FetchArgs {
        // verify required parameter "userData" is set
        if (params["userData"] == null) {
            throw new Error("Missing required parameter userData when calling modifyUserUsingPUT");
        }
        const baseUrl = `/admin/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "PUT" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["userData"]) {
            fetchOptions.body = JSON.stringify(params["userData"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * UseradmincontrollerApi - functional programming interface
 */
export const UseradmincontrollerApiFp = {
    /** 
     * addUser
     * @param newUserData newUserData
     */
    addUserUsingPOST(params: { "newUserData": UserAddMeta;  }, options?: any): (basePath?: string) => Promise<number> {
        const fetchArgs = UseradmincontrollerApiFetchParamCreator.addUserUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<number>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * modifyUser
     * @param userData userData
     */
    modifyUserUsingPUT(params: { "userData": User;  }, options?: any): (basePath?: string) => Promise<User> {
        const fetchArgs = UseradmincontrollerApiFetchParamCreator.modifyUserUsingPUT(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<User>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * UseradmincontrollerApi - object-oriented interface
 */
export class UseradmincontrollerApi extends BaseAPI {
    /** 
     * addUser
     * @param newUserData newUserData
     */
    addUserUsingPOST(params: {  "newUserData": UserAddMeta; }, options?: any) {
        return UseradmincontrollerApiFp.addUserUsingPOST(params, options)(this.basePath);
    }
    /** 
     * modifyUser
     * @param userData userData
     */
    modifyUserUsingPUT(params: {  "userData": User; }, options?: any) {
        return UseradmincontrollerApiFp.modifyUserUsingPUT(params, options)(this.basePath);
    }
};

/**
 * UseradmincontrollerApi - factory interface
 */
export const UseradmincontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * addUser
         * @param newUserData newUserData
         */
        addUserUsingPOST(params: {  "newUserData": UserAddMeta; }, options?: any) {
            return UseradmincontrollerApiFp.addUserUsingPOST(params, options)(basePath);
        },
        /** 
         * modifyUser
         * @param userData userData
         */
        modifyUserUsingPUT(params: {  "userData": User; }, options?: any) {
            return UseradmincontrollerApiFp.modifyUserUsingPUT(params, options)(basePath);
        },
    };
};


/**
 * UsercontrollerApi - fetch parameter creator
 */
export const UsercontrollerApiFetchParamCreator = {
    /** 
     * getAll
     * @param searchString searchString
     */
    getAllUsingGET(params: {  "searchString"?: string; }, options?: any): FetchArgs {
        const baseUrl = `/user`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = Object.assign({}, urlObj.query, {
            "searchString": params["searchString"],
        });
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * getTemporaryToken
     */
    getTemporaryTokenUsingGET(options?: any): FetchArgs {
        const baseUrl = `/user/me/tempToken`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * get
     */
    getUsingGET(options?: any): FetchArgs {
        const baseUrl = `/user/me`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * login
     * @param creds creds
     */
    loginUsingPOST(params: {  "creds": AccountCredentials; }, options?: any): FetchArgs {
        // verify required parameter "creds" is set
        if (params["creds"] == null) {
            throw new Error("Missing required parameter creds when calling loginUsingPOST");
        }
        const baseUrl = `/user/login`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        contentTypeHeader["Content-Type"] = "application/json";
        if (params["creds"]) {
            fetchOptions.body = JSON.stringify(params["creds"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * resetPassword
     */
    resetPasswordUsingPOST(options?: any): FetchArgs {
        const baseUrl = `/user/me/resetPassword`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = Object.assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = Object.assign({}, defaultHeaders);
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * UsercontrollerApi - functional programming interface
 */
export const UsercontrollerApiFp = {
    /** 
     * getAll
     * @param searchString searchString
     */
    getAllUsingGET(params: { "searchString"?: string;  }, options?: any): (basePath?: string) => Promise<Array<User>> {
        const fetchArgs = UsercontrollerApiFetchParamCreator.getAllUsingGET(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<Array<User>>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * getTemporaryToken
     */
    getTemporaryTokenUsingGET(options?: any): (basePath?: string) => Promise<string> {
        const fetchArgs = UsercontrollerApiFetchParamCreator.getTemporaryTokenUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<string>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * get
     */
    getUsingGET(options?: any): (basePath?: string) => Promise<UserMeta> {
        const fetchArgs = UsercontrollerApiFetchParamCreator.getUsingGET(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<UserMeta>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * login
     * @param creds creds
     */
    loginUsingPOST(params: { "creds": AccountCredentials;  }, options?: any): (basePath?: string) => Promise<TokenResult> {
        const fetchArgs = UsercontrollerApiFetchParamCreator.loginUsingPOST(params, options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<TokenResult>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * resetPassword
     */
    resetPasswordUsingPOST(options?: any): (basePath?: string) => Promise<string> {
        const fetchArgs = UsercontrollerApiFetchParamCreator.resetPasswordUsingPOST(options);
        return (basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return <Promise<string>>response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * UsercontrollerApi - object-oriented interface
 */
export class UsercontrollerApi extends BaseAPI {
    /** 
     * getAll
     * @param searchString searchString
     */
    getAllUsingGET(params: {  "searchString"?: string; }, options?: any) {
        return UsercontrollerApiFp.getAllUsingGET(params, options)(this.basePath);
    }
    /** 
     * getTemporaryToken
     */
    getTemporaryTokenUsingGET(options?: any) {
        return UsercontrollerApiFp.getTemporaryTokenUsingGET(options)(this.basePath);
    }
    /** 
     * get
     */
    getUsingGET(options?: any) {
        return UsercontrollerApiFp.getUsingGET(options)(this.basePath);
    }
    /** 
     * login
     * @param creds creds
     */
    loginUsingPOST(params: {  "creds": AccountCredentials; }, options?: any) {
        return UsercontrollerApiFp.loginUsingPOST(params, options)(this.basePath);
    }
    /** 
     * resetPassword
     */
    resetPasswordUsingPOST(options?: any) {
        return UsercontrollerApiFp.resetPasswordUsingPOST(options)(this.basePath);
    }
};

/**
 * UsercontrollerApi - factory interface
 */
export const UsercontrollerApiFactory = function (basePath?: string) {
    return {
        /** 
         * getAll
         * @param searchString searchString
         */
        getAllUsingGET(params: {  "searchString"?: string; }, options?: any) {
            return UsercontrollerApiFp.getAllUsingGET(params, options)(basePath);
        },
        /** 
         * getTemporaryToken
         */
        getTemporaryTokenUsingGET(options?: any) {
            return UsercontrollerApiFp.getTemporaryTokenUsingGET(options)(basePath);
        },
        /** 
         * get
         */
        getUsingGET(options?: any) {
            return UsercontrollerApiFp.getUsingGET(options)(basePath);
        },
        /** 
         * login
         * @param creds creds
         */
        loginUsingPOST(params: {  "creds": AccountCredentials; }, options?: any) {
            return UsercontrollerApiFp.loginUsingPOST(params, options)(basePath);
        },
        /** 
         * resetPassword
         */
        resetPasswordUsingPOST(options?: any) {
            return UsercontrollerApiFp.resetPasswordUsingPOST(options)(basePath);
        },
    };
};

